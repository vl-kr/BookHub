// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240117200313_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(152),
                            PostalCode = "12345",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Los Angeles",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(154),
                            PostalCode = "67890",
                            Street = "456 Elm St"
                        },
                        new
                        {
                            Id = 3,
                            City = "Chicago",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(156),
                            PostalCode = "54321",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = 4,
                            City = "Houston",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(157),
                            PostalCode = "98765",
                            Street = "101 Pine St"
                        },
                        new
                        {
                            Id = 5,
                            City = "Miami",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(157),
                            PostalCode = "24680",
                            Street = "202 Maple St"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9495),
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9498),
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9499),
                            Name = "George R.R. Martin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9500),
                            Name = "Jo Nesbo"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9500),
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9506),
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9507),
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9508),
                            Name = "Dan Brown"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9509),
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9510),
                            Name = "William Shakespeare"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9511),
                            Name = "Markus Zusak"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9511),
                            Name = "F. Scott Fitzgerald"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9512),
                            Name = "John Green"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9513),
                            Name = "Khaled Hosseini"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9514),
                            Name = "Veronica Roth"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9515),
                            Name = "Paulo Coelho"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9515),
                            Name = "Paula Hawkins"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9517),
                            Name = "Gillian Flynn"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9518),
                            Name = "E.L. James"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("YearPublished")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9539),
                            Description = "The Hobbit, or There and Back Again is a children's fantasy novel by English author J. R. R. Tolkien. It was published on 21 September 1937 to wide critical acclaim, being nominated for the Carnegie Medal and awarded a prize from the New York Herald Tribune for best juvenile fiction. The book remains popular and is recognized as a classic in children's literature.",
                            ISBN = "9780006754024",
                            ImageUrl = "https://m.media-amazon.com/images/I/710+HcoP38L._SY466_.jpg",
                            Price = 24.99m,
                            PrimaryGenreId = 1,
                            PublisherId = 1,
                            Title = "The Hobbit",
                            YearPublished = 1937
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9550),
                            Description = "A Game of Thrones is the first novel in A Song of Ice and Fire, a series of fantasy novels by the American author George R. R. Martin. It was first published on August 1, 1996. The novel won the 1997 Locus Award and was nominated for both the 1997 Nebula Award and the 1997 World Fantasy Award.",
                            ISBN = "9780553103540",
                            ImageUrl = "https://m.media-amazon.com/images/I/81GdMqla0cL._SY466_.jpg",
                            Price = 9.99m,
                            PrimaryGenreId = 2,
                            PublisherId = 2,
                            Title = "A Game of Thrones",
                            YearPublished = 1996
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9552),
                            Description = "The Shining is a horror novel by American author Stephen King. Published in 1977, it is King's third published novel and first hardback bestseller: the success of the book firmly established King as a preeminent author in the horror genre.",
                            ISBN = "9780385121675",
                            ImageUrl = "https://m.media-amazon.com/images/I/81QckmGleYL._SY466_.jpg",
                            Price = 10.99m,
                            PrimaryGenreId = 3,
                            PublisherId = 3,
                            Title = "The Shining",
                            YearPublished = 1977
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9554),
                            Description = "The Snowman is a novel by Norwegian crime-writer Jo Nesbø. It is the seventh entry in his Harry Hole series. In Australia, the title was changed to Harry Hole: The Snowman, because of another 1991 novel of the same name by J.R. Rain.",
                            ISBN = "9780099520276",
                            ImageUrl = "https://m.media-amazon.com/images/I/61uvYOfKHzL._SY466_.jpg",
                            Price = 9.99m,
                            PrimaryGenreId = 4,
                            PublisherId = 4,
                            Title = "The Snowman",
                            YearPublished = 2007
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9556),
                            Description = "The Return of the King is the third and final volume of J. R. R. Tolkien's The Lord of the Rings, following The Fellowship of the Ring and The Two Towers. The story begins in the kingdom of Gondor, which is soon to be attacked by the Dark Lord Sauron.",
                            ISBN = "9780618260553",
                            ImageUrl = "https://m.media-amazon.com/images/I/91tZn9CjAwL._SY466_.jpg",
                            Price = 11.99m,
                            PrimaryGenreId = 5,
                            PublisherId = 1,
                            Title = "The Return of the King",
                            YearPublished = 1955
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9558),
                            Description = "It is a horror novel by American author Stephen King, published in 1986. It deals with themes that eventually became King staples: the power of memory, childhood trauma, and the ugliness lurking behind a façade of traditional small-town values.",
                            ISBN = "9780451169518",
                            ImageUrl = "https://m.media-amazon.com/images/I/91jgm-KF0ZL._SL1500_.jpg",
                            Price = 14.99m,
                            PrimaryGenreId = 6,
                            PublisherId = 3,
                            Title = "It",
                            YearPublished = 1986
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9561),
                            Description = "The Catcher in the Rye is a novel by J.D. Salinger, published in 1951. It is a story of a young man named Holden Caulfield who embarks on a journey of self-discovery in New York City.",
                            ISBN = "9780316769488",
                            ImageUrl = "https://m.media-amazon.com/images/I/71nXPGovoTL._SL1500_.jpg",
                            Price = 9.99m,
                            PrimaryGenreId = 7,
                            PublisherId = 5,
                            Title = "The Catcher in the Rye",
                            YearPublished = 1951
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9563),
                            Description = "The Da Vinci Code is a mystery thriller novel by Dan Brown, published in 2003. It follows the adventures of Robert Langdon, a Harvard professor of symbology, as he tries to solve a murder that leads to a series of secrets kept by a secret society.",
                            ISBN = "9780307474278",
                            ImageUrl = "https://m.media-amazon.com/images/I/71QG6t0OOrL._SL1200_.jpg",
                            Price = 10.99m,
                            PrimaryGenreId = 8,
                            PublisherId = 6,
                            Title = "The Da Vinci Code",
                            YearPublished = 2003
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9565),
                            Description = "Pride and Prejudice is a novel by Jane Austen, published in 1813. It is a classic of English literature and tells the story of Elizabeth Bennet and her romantic relationship with Mr. Darcy.",
                            ISBN = "9780486280575",
                            ImageUrl = "https://m.media-amazon.com/images/I/81NLDvyAHrL._SL1500_.jpg",
                            Price = 11.99m,
                            PrimaryGenreId = 9,
                            PublisherId = 8,
                            Title = "Pride and Prejudice",
                            YearPublished = 1813
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9662),
                            Description = "The Great Gatsby is a novel by F. Scott Fitzgerald, published in 1925. It is a story of the American Dream, wealth, and love, set against the backdrop of the Roaring Twenties.",
                            ISBN = "9780743273565",
                            ImageUrl = "https://m.media-amazon.com/images/I/61z0MrB6qOS._SL1500_.jpg",
                            Price = 12.99m,
                            PrimaryGenreId = 10,
                            PublisherId = 7,
                            Title = "The Great Gatsby",
                            YearPublished = 1925
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9665),
                            Description = "The Girl with the Dragon Tattoo is a crime thriller novel by Swedish author and journalist Stieg Larsson, published in 2005. It follows the investigation into the disappearance of a wealthy industrialist's niece and delves into family secrets.",
                            ISBN = "9780307269751",
                            ImageUrl = "https://m.media-amazon.com/images/I/81UOA8fDGaL._SL1500_.jpg",
                            Price = 16.99m,
                            PrimaryGenreId = 11,
                            PublisherId = 4,
                            Title = "The Girl with the Dragon Tattoo",
                            YearPublished = 2005
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9667),
                            Description = "1984 is a dystopian novel by George Orwell, published in 1949. It portrays a totalitarian society where the government exercises control over every aspect of people's lives, including their thoughts and language.",
                            ISBN = "9780451524935",
                            ImageUrl = "https://m.media-amazon.com/images/I/61u1QqUfL-L._SL1500_.jpg",
                            Price = 11.99m,
                            PrimaryGenreId = 12,
                            PublisherId = 5,
                            Title = "1984",
                            YearPublished = 1949
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9669),
                            Description = "To Kill a Mockingbird is a novel by Harper Lee, published in 1960. It addresses issues of racism, social injustice, and moral growth as seen through the eyes of a young girl in the American South.",
                            ISBN = "9780061120084",
                            ImageUrl = "https://m.media-amazon.com/images/I/51tDHl8Z7cL.jpg",
                            Price = 8.99m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            Title = "To Kill a Mockingbird",
                            YearPublished = 1960
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9671),
                            Description = "The Alchemist is a novel by Brazilian author Paulo Coelho, originally published in Portuguese in 1988. It is a philosophical and inspirational book that tells the story of Santiago, a shepherd boy who embarks on a journey to fulfill his dreams.",
                            ISBN = "9780061122415",
                            ImageUrl = "https://m.media-amazon.com/images/I/71zHDXu1TaL._SL1500_.jpg",
                            Price = 5.99m,
                            PrimaryGenreId = 1,
                            PublisherId = 2,
                            Title = "The Alchemist",
                            YearPublished = 1988
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9673),
                            Description = "The Catcher in the Rye is a novel by J.D. Salinger, published in 1951. It is a story of a young man named Holden Caulfield who embarks on a journey of self-discovery in New York City.",
                            ISBN = "9780316769488",
                            ImageUrl = "https://m.media-amazon.com/images/I/91iDBLW-vHL._SL1500_.jpg",
                            Price = 7.99m,
                            PrimaryGenreId = 2,
                            PublisherId = 5,
                            Title = "The Catcher in the Rye",
                            YearPublished = 1951
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9674),
                            Description = "Moby-Dick; or, The Whale is an epic novel by Herman Melville, published in 1851. It tells the story of Captain Ahab's obsessive quest to kill the giant white whale, Moby-Dick.",
                            ISBN = "9780143107319",
                            ImageUrl = "https://m.media-amazon.com/images/I/71d5wo+-MuL._SL1200_.jpg",
                            Price = 6.99m,
                            PrimaryGenreId = 3,
                            PublisherId = 1,
                            Title = "Moby-Dick",
                            YearPublished = 1851
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9676),
                            Description = "The Road is a post-apocalyptic novel by Cormac McCarthy, published in 2006. It follows a father and son's journey through a desolate, dangerous world in search of safety.",
                            ISBN = "9780307265432",
                            ImageUrl = "https://m.media-amazon.com/images/I/51M7XGLQTBL._SL1200_.jpg",
                            Price = 4.99m,
                            PrimaryGenreId = 4,
                            PublisherId = 1,
                            Title = "The Road",
                            YearPublished = 2006
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9680),
                            Description = "The Hitchhiker's Guide to the Galaxy is a comedic science fiction series by Douglas Adams, first published in 1979. It follows the misadventures of Arthur Dent, an unwitting Earthling who travels the universe with an alien friend.",
                            ISBN = "9780345391803",
                            ImageUrl = "https://m.media-amazon.com/images/I/91pUhA4qZnL._SL1500_.jpg",
                            Price = 15.99m,
                            PrimaryGenreId = 5,
                            PublisherId = 2,
                            Title = "The Hitchhiker's Guide to the Galaxy",
                            YearPublished = 1979
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9682),
                            Description = "War and Peace is an epic historical novel by Leo Tolstoy, published in 1869. It chronicles the events of Russian society during the Napoleonic era and features a large cast of characters.",
                            ISBN = "9780192833983",
                            ImageUrl = "https://m.media-amazon.com/images/I/81bLfmgMcwL._SL1500_.jpg",
                            Price = 10.99m,
                            PrimaryGenreId = 6,
                            PublisherId = 3,
                            Title = "War and Peace",
                            YearPublished = 1869
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9684),
                            Description = "Brave New World is a dystopian novel by Aldous Huxley, published in 1932. It explores a future society where advanced technology has eliminated suffering, but at the cost of personal freedom and individuality.",
                            ISBN = "9780060850524",
                            ImageUrl = "https://m.media-amazon.com/images/I/71aDrgLp9CL._SL1360_.jpg",
                            Price = 7.99m,
                            PrimaryGenreId = 7,
                            PublisherId = 6,
                            Title = "Brave New World",
                            YearPublished = 1932
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId", "AuthorId")
                        .IsUnique();

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9827)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9829)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 5,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9830)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9831)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9832)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9833)
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 1,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9834)
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9835)
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 2,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9835)
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 4,
                            BookId = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9837)
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 5,
                            BookId = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9838)
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 6,
                            BookId = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9839)
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 7,
                            BookId = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9839)
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 1,
                            BookId = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9840)
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 5,
                            BookId = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9841)
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 5,
                            BookId = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9842)
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 3,
                            BookId = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9843)
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 7,
                            BookId = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9844)
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 4,
                            BookId = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9845)
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 1,
                            BookId = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9846)
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = 2,
                            BookId = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9847)
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = 6,
                            BookId = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9848)
                        },
                        new
                        {
                            Id = 23,
                            AuthorId = 7,
                            BookId = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9849)
                        },
                        new
                        {
                            Id = 24,
                            AuthorId = 5,
                            BookId = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9849)
                        },
                        new
                        {
                            Id = 25,
                            AuthorId = 3,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9850)
                        },
                        new
                        {
                            Id = 26,
                            AuthorId = 7,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9851)
                        },
                        new
                        {
                            Id = 27,
                            AuthorId = 2,
                            BookId = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9852)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GenreId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("BookId", "GenreId")
                        .IsUnique();

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9797),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9800),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9802),
                            GenreId = 5
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9803),
                            GenreId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9804),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9805),
                            GenreId = 6
                        },
                        new
                        {
                            Id = 7,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9806),
                            GenreId = 4
                        },
                        new
                        {
                            Id = 8,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9807),
                            GenreId = 2
                        },
                        new
                        {
                            Id = 9,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9808),
                            GenreId = 2
                        },
                        new
                        {
                            Id = 10,
                            BookId = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9809),
                            GenreId = 10
                        },
                        new
                        {
                            Id = 11,
                            BookId = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9810),
                            GenreId = 5
                        },
                        new
                        {
                            Id = 12,
                            BookId = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9811),
                            GenreId = 6
                        },
                        new
                        {
                            Id = 13,
                            BookId = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9812),
                            GenreId = 11
                        },
                        new
                        {
                            Id = 14,
                            BookId = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9813),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 15,
                            BookId = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9813),
                            GenreId = 5
                        },
                        new
                        {
                            Id = 16,
                            BookId = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9814),
                            GenreId = 5
                        },
                        new
                        {
                            Id = 17,
                            BookId = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9815),
                            GenreId = 8
                        },
                        new
                        {
                            Id = 18,
                            BookId = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9816),
                            GenreId = 5
                        },
                        new
                        {
                            Id = 19,
                            BookId = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9817),
                            GenreId = 11
                        },
                        new
                        {
                            Id = 20,
                            BookId = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9818),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 21,
                            BookId = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9819),
                            GenreId = 8
                        },
                        new
                        {
                            Id = 22,
                            BookId = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9820),
                            GenreId = 6
                        },
                        new
                        {
                            Id = 23,
                            BookId = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9821),
                            GenreId = 7
                        },
                        new
                        {
                            Id = 24,
                            BookId = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9822),
                            GenreId = 9
                        },
                        new
                        {
                            Id = 25,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9822),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 26,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9823),
                            GenreId = 12
                        },
                        new
                        {
                            Id = 27,
                            BookId = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9824),
                            GenreId = 10
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PreferredBillingAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreferredShippingAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreferredBillingAddressId");

                    b.HasIndex("PreferredShippingAddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9723),
                            Email = "test.admin@mail.com",
                            FirstName = "Test",
                            LastName = "Admin",
                            PhoneNumber = "5551346798",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9728),
                            Email = "test.user@mail.com",
                            FirstName = "Test",
                            LastName = "User",
                            PhoneNumber = "5553164978",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9729),
                            Email = "john.martin@mail.com",
                            FirstName = "John",
                            LastName = "Martin",
                            PhoneNumber = "5551234567",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9730),
                            Email = "jane.jones@mail.com",
                            FirstName = "Jane",
                            LastName = "Jones",
                            PhoneNumber = "5559876543",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9732),
                            Email = "jack.peters@mail.com",
                            FirstName = "Jack",
                            LastName = "Peters",
                            PhoneNumber = "5552109876",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9733),
                            Email = "jill.kowalski@mail.com",
                            FirstName = "Jill",
                            LastName = "Kowalski",
                            PhoneNumber = "5556789054",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9734),
                            Email = "james.smith@mail.com",
                            FirstName = "James",
                            LastName = "Smith",
                            PhoneNumber = "5551234509",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9735),
                            Email = "jennifer.roberts@mail.com",
                            FirstName = "Jennifer",
                            LastName = "Roberts",
                            PhoneNumber = "5550987654",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9736),
                            Email = "jeffrey.taylor@mail.com",
                            FirstName = "Jeffrey",
                            LastName = "Taylor",
                            PhoneNumber = "5555432167",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9738),
                            Email = "jessica.wilson@mail.com",
                            FirstName = "Jessica",
                            LastName = "Wilson",
                            PhoneNumber = "5558765432",
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9739),
                            Email = "jeremy.anderson@mail.com",
                            FirstName = "Jeremy",
                            LastName = "Anderson",
                            PhoneNumber = "5554321098",
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9779),
                            Email = "julia.brown@mail.com",
                            FirstName = "Julia",
                            LastName = "Brown",
                            PhoneNumber = "5553210987",
                            UserId = 12
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9783),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9784),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9785),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9786),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9787),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9788),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9789),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9789),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9790),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9791),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9792),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9793),
                            Name = "History"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9794),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9795),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9afb4282-5f2a-47bf-a079-951fb52ea507",
                            CustomerId = 1,
                            Email = "test.admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.ADMIN@MAIL.COM",
                            NormalizedUserName = "TEST.ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjy2gS4mypoiogDNliVpWzAtjNPsQXEXFfZz4RtXHnK6S8ACAcaAfpj5acyuZLSpg==",
                            PhoneNumber = "5551346798",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "694baa95-4931-4dde-a07f-1b32ab37cd9f",
                            TwoFactorEnabled = false,
                            UserName = "test.admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b707214-b0ee-40a2-a20f-5f88570e5736",
                            CustomerId = 2,
                            Email = "test.user@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.USER@MAIL.COM",
                            NormalizedUserName = "TEST.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAb+mUr+ioAgd6FqFPOQ8/WqUrjpR95ClcHFYQdtxoOKA5GdHn9AlYkxspAZpUbirw==",
                            PhoneNumber = "5553164978",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99c225bd-e3f8-4d30-b9a7-7c8c4f46ad74",
                            TwoFactorEnabled = false,
                            UserName = "test.user"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d365ed75-6684-4fd9-8301-46c64230f02d",
                            CustomerId = 3,
                            Email = "john.martin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.MARTIN@MAIL.COM",
                            NormalizedUserName = "JOHN.MARTIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKMriFI3tzFgaGySt+Jlj1pG9lQnDH4l0N8oJroU2/B6mUdpGB4E6xonvUC7Ce7WA==",
                            PhoneNumber = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "029b3246-ed22-4cd6-9dc5-63fd6477e446",
                            TwoFactorEnabled = false,
                            UserName = "john.martin"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f822aed-ba55-4d64-9986-435c4414a437",
                            CustomerId = 4,
                            Email = "jane.jones@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.JONES@MAIL.COM",
                            NormalizedUserName = "JANE.JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIedb16siggvgN99/piPBFbd/hVi5oI7pZc6Frb7OL9w27zadA+4LoekUwMPCLQQqQ==",
                            PhoneNumber = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8c941b5-eccc-45d4-afcb-892000c8c05a",
                            TwoFactorEnabled = false,
                            UserName = "jane.jones"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d80beef1-ef4a-47d7-90ae-a3782999d03c",
                            CustomerId = 5,
                            Email = "jack.peters@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK.PETERS@MAIL.COM",
                            NormalizedUserName = "JACK.PETERS",
                            PasswordHash = "AQAAAAIAAYagAAAAEDBoh8Gx2m3VKYVJusn2jFNKyCb/8JvxbBZcCXbrH2vqeK1jVGskqxCi7uPgmKKyuQ==",
                            PhoneNumber = "5552109876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85413492-0a36-429b-ba33-3ffc20df8e66",
                            TwoFactorEnabled = false,
                            UserName = "jack.peters"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "475b64ac-650c-4fd9-aced-fef7727b6ece",
                            CustomerId = 6,
                            Email = "jill.kowalski@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JILL.KOWALSKI@MAIL.COM",
                            NormalizedUserName = "JILL.KOWALSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEFBoBcs/WWNOGNkuetCyqb0yD2HDh9yHbLkDUuEfkO/zorZqn/8eaoUqP3nrgc5rcg==",
                            PhoneNumber = "5556789054",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c5f516d-c383-47a4-b8c6-df2ebfb0c6ca",
                            TwoFactorEnabled = false,
                            UserName = "jill.kowalski"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5de18394-226e-42e0-80b1-928fbf8e2b5d",
                            CustomerId = 7,
                            Email = "james.smith@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.SMITH@MAIL.COM",
                            NormalizedUserName = "JAMES.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8jti9olIE9c+CIQb8v2VYo6CjZM0v0v9K12e10xdMOmnUFANBJFiBICj2xVP9wkQ==",
                            PhoneNumber = "5551234509",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6e73f9b-ae13-48f3-aa9a-b58af4811df5",
                            TwoFactorEnabled = false,
                            UserName = "james.smith"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d0cde9d-11b6-44f8-90e5-2da96c67088c",
                            CustomerId = 8,
                            Email = "jennifer.roberts@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIFER.ROBERTS@MAIL.COM",
                            NormalizedUserName = "JENNIFER.ROBERTS",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGuWVKrhGJYnqLr8c95MUEPhylOh4wlnzYSXEG61oCimpTZw6170oj5+UWkWrLBTQ==",
                            PhoneNumber = "5550987654",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa9e5b78-2b30-4044-aba7-bad716f4e0db",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.roberts"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dad66fc5-7f56-4ae2-bbe5-8b9842e892db",
                            CustomerId = 9,
                            Email = "jeffrey.taylor@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JEFFREY.TAYLOR@MAIL.COM",
                            NormalizedUserName = "JEFFREY.TAYLOR",
                            PasswordHash = "AQAAAAIAAYagAAAAECtmiSO+NKQ8tkNRtGM3zlV1keyeJhJw++OTBJD6N2edADqp23/SmDB3M+EYtKTx8Q==",
                            PhoneNumber = "5555432167",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8631a88-6112-484b-b9bc-ed5e5213e0cd",
                            TwoFactorEnabled = false,
                            UserName = "jeffrey.taylor"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faef171e-7781-431a-a53c-95834692dd49",
                            CustomerId = 10,
                            Email = "jessica.wilson@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JESSICA.WILSON@MAIL.COM",
                            NormalizedUserName = "JESSICA.WILSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+fXOA8ZUH6bzbhGLjhu9qCYidWtqBcuhe9xSSNBH2cyTuLbpiUVDM7uoQ/tGWxlQ==",
                            PhoneNumber = "5558765432",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02e30bfb-72b4-4a91-a875-1f35143e53c9",
                            TwoFactorEnabled = false,
                            UserName = "jessica.wilson"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2789352-e140-49d5-8373-d8d2a6a4f773",
                            CustomerId = 11,
                            Email = "jeremy.anderson@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JEREMY.ANDERSON@MAIL.COM",
                            NormalizedUserName = "JEREMY.ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQTtPN06oKZXNQ+KpdhiM02zrCtfN0wriTWAxW97ehKke1v8y3RwEAAwir7XAh8+g==",
                            PhoneNumber = "5554321098",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61e889c5-6b6b-4dc4-8af5-ad7035fd12d0",
                            TwoFactorEnabled = false,
                            UserName = "jeremy.anderson"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c0e6d6c-614a-48de-8dd3-bd815aff64a8",
                            CustomerId = 12,
                            Email = "julia.brown@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.BROWN@MAIL.COM",
                            NormalizedUserName = "JULIA.BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGy4qlM2GrcSNXnSitrt+ljs/3yL2vtt9mp9F/MdFZaTso9pYyqhGCg5omz1ro2kAQ==",
                            PhoneNumber = "5553210987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3e99141-8e63-494b-a949-03119a4c56a6",
                            TwoFactorEnabled = false,
                            UserName = "julia.brown"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShippingMethodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddressId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9857),
                            CustomerId = 1,
                            IsPaid = true,
                            OrderDate = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9856),
                            OrderStatusId = 1,
                            ShippingAddressId = 1,
                            TotalPrice = 24.99m
                        },
                        new
                        {
                            Id = 2,
                            BillingAddressId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9863),
                            CustomerId = 2,
                            IsPaid = false,
                            OrderDate = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9863),
                            OrderStatusId = 2,
                            ShippingAddressId = 2,
                            TotalPrice = 31.97m
                        },
                        new
                        {
                            Id = 3,
                            BillingAddressId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9865),
                            CustomerId = 3,
                            IsPaid = true,
                            OrderDate = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9864),
                            OrderStatusId = 3,
                            ShippingAddressId = 3,
                            TotalPrice = 11.99m
                        },
                        new
                        {
                            Id = 4,
                            BillingAddressId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9901),
                            CustomerId = 4,
                            IsPaid = true,
                            OrderDate = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9900),
                            OrderStatusId = 1,
                            ShippingAddressId = 4,
                            TotalPrice = 29.98m
                        },
                        new
                        {
                            Id = 5,
                            BillingAddressId = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9903),
                            CustomerId = 5,
                            IsPaid = false,
                            OrderDate = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9903),
                            OrderStatusId = 2,
                            ShippingAddressId = 5,
                            TotalPrice = 61.94m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("BookId", "OrderId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9908),
                            OrderId = 1,
                            Quantity = 1,
                            TotalPrice = 24.99m
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9918),
                            OrderId = 2,
                            Quantity = 1,
                            TotalPrice = 9.99m
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9919),
                            OrderId = 2,
                            Quantity = 2,
                            TotalPrice = 21.99m
                        },
                        new
                        {
                            Id = 4,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9920),
                            OrderId = 3,
                            Quantity = 1,
                            TotalPrice = 11.99m
                        },
                        new
                        {
                            Id = 5,
                            BookId = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9921),
                            OrderId = 4,
                            Quantity = 2,
                            TotalPrice = 29.98m
                        },
                        new
                        {
                            Id = 6,
                            BookId = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(102),
                            OrderId = 5,
                            Quantity = 4,
                            TotalPrice = 39.96m
                        },
                        new
                        {
                            Id = 7,
                            BookId = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(104),
                            OrderId = 5,
                            Quantity = 2,
                            TotalPrice = 21.98m
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(128),
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(130),
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(131),
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(132),
                            Name = "Payment Received"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(133),
                            Name = "Payment Failed"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(133),
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(134),
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(137),
                            Description = "Securely pay with your credit card.",
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(139),
                            Description = "Fast and reliable payments through PayPal.",
                            Name = "PayPal"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(140),
                            Description = "Seamless payments with Google Pay's convenience.",
                            Name = "Google Pay"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(141),
                            Description = "Flexible payment options with Stripe.",
                            Name = "Stripe"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(141),
                            Description = "Make easy and secure payments using Apple Pay.",
                            Name = "Apple Pay"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9526),
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9528),
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9529),
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9529),
                            Name = "Hachette Livre"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9530),
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9531),
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9532),
                            Name = "Pearson PLC"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9533),
                            Name = "Oxford University Press"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("TextReview")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("BookId", "CustomerId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9689),
                            CustomerId = 3,
                            Rating = 5,
                            TextReview = "This book is amazing!"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9693),
                            CustomerId = 4,
                            Rating = 4,
                            TextReview = "This book is pretty good!"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9694),
                            CustomerId = 3,
                            Rating = 3,
                            TextReview = "This book is ok!"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9696),
                            CustomerId = 3,
                            Rating = 2,
                            TextReview = "This book is pretty bad!"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9697),
                            CustomerId = 7,
                            Rating = 1,
                            TextReview = "This book is terrible!"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9698),
                            CustomerId = 9,
                            Rating = 4,
                            TextReview = "An enchanting read that captivated my imagination!"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9699),
                            CustomerId = 10,
                            Rating = 3,
                            TextReview = "Decent book, but not my favorite."
                        },
                        new
                        {
                            Id = 8,
                            BookId = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9700),
                            CustomerId = 5,
                            Rating = 5,
                            TextReview = "A gripping page-turner that held my attention till the end!"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9701),
                            CustomerId = 10,
                            Rating = 2,
                            TextReview = "Disappointing book, didn't live up to the hype."
                        },
                        new
                        {
                            Id = 10,
                            BookId = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9703),
                            CustomerId = 3,
                            Rating = 4,
                            TextReview = "An enjoyable and thought-provoking literary journey."
                        },
                        new
                        {
                            Id = 11,
                            BookId = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9704),
                            CustomerId = 6,
                            Rating = 5,
                            TextReview = "This book is a masterpiece that will stay with me forever!"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9705),
                            CustomerId = 7,
                            Rating = 4,
                            TextReview = "A classic that never gets old, a must-read!"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9706),
                            CustomerId = 8,
                            Rating = 3,
                            TextReview = "It was an interesting story, but it didn't fully resonate with me."
                        },
                        new
                        {
                            Id = 14,
                            BookId = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9707),
                            CustomerId = 1,
                            Rating = 5,
                            TextReview = "A compelling narrative with well-developed characters!"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9708),
                            CustomerId = 4,
                            Rating = 4,
                            TextReview = "This book made me ponder the meaning of life."
                        },
                        new
                        {
                            Id = 16,
                            BookId = 19,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9709),
                            CustomerId = 9,
                            Rating = 4,
                            TextReview = "A thought-provoking and engaging story that kept me hooked!"
                        },
                        new
                        {
                            Id = 17,
                            BookId = 18,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9710),
                            CustomerId = 6,
                            Rating = 3,
                            TextReview = "Decent read, but not a personal favorite."
                        },
                        new
                        {
                            Id = 18,
                            BookId = 17,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9711),
                            CustomerId = 3,
                            Rating = 5,
                            TextReview = "This book is a literary gem, a must-read!"
                        },
                        new
                        {
                            Id = 19,
                            BookId = 20,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9712),
                            CustomerId = 8,
                            Rating = 2,
                            TextReview = "A disappointment, didn't live up to expectations."
                        },
                        new
                        {
                            Id = 20,
                            BookId = 12,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9713),
                            CustomerId = 1,
                            Rating = 4,
                            TextReview = "An unforgettable narrative with well-developed characters."
                        },
                        new
                        {
                            Id = 21,
                            BookId = 16,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9714),
                            CustomerId = 4,
                            Rating = 5,
                            TextReview = "This book is a true masterpiece of literature!"
                        },
                        new
                        {
                            Id = 22,
                            BookId = 13,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9715),
                            CustomerId = 10,
                            Rating = 4,
                            TextReview = "A classic that continues to captivate readers."
                        },
                        new
                        {
                            Id = 23,
                            BookId = 15,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9716),
                            CustomerId = 5,
                            Rating = 3,
                            TextReview = "An interesting story, but not my top choice."
                        },
                        new
                        {
                            Id = 24,
                            BookId = 14,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9717),
                            CustomerId = 7,
                            Rating = 5,
                            TextReview = "This book was a delightful journey with rich characters."
                        },
                        new
                        {
                            Id = 25,
                            BookId = 11,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 45, DateTimeKind.Utc).AddTicks(9718),
                            CustomerId = 2,
                            Rating = 4,
                            TextReview = "A philosophical exploration that left me thinking."
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(144),
                            Description = "DHL Express - Fast and reliable international shipping",
                            Name = "DHL"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(146),
                            Description = "UPS Ground - Economical domestic shipping",
                            Name = "UPS Ground"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(147),
                            Description = "FedEx Standard - Standard shipping service",
                            Name = "FedEx Standard"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(163),
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(167),
                            CustomerId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("BookId", "ShoppingCartId")
                        .IsUnique();

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(169),
                            Quantity = 1,
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(173),
                            Quantity = 1,
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(174),
                            Quantity = 1,
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(175),
                            Quantity = 2,
                            ShoppingCartId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(176),
                            Quantity = 1,
                            ShoppingCartId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(178),
                            Quantity = 1,
                            ShoppingCartId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(179),
                            Quantity = 1,
                            ShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(111),
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(114),
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(114),
                            CustomerId = 3
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WishlistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WishlistId");

                    b.HasIndex("BookId", "WishlistId")
                        .IsUnique();

                    b.ToTable("WishlistItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(117),
                            WishlistId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(119),
                            WishlistId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(119),
                            WishlistId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(120),
                            WishlistId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 7,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(121),
                            WishlistId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(123),
                            WishlistId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(123),
                            WishlistId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(124),
                            WishlistId = 3
                        },
                        new
                        {
                            Id = 9,
                            BookId = 10,
                            CreatedAt = new DateTime(2024, 1, 17, 20, 3, 13, 46, DateTimeKind.Utc).AddTicks(125),
                            WishlistId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany()
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookAuthor", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Address", "PreferredBillingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredBillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Address", "PreferredShippingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("DataAccessLayer.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredBillingAddress");

                    b.Navigation("PreferredShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BillingAddress");

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingAddress");

                    b.Navigation("ShippingMethod");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShoppingCart", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("DataAccessLayer.Entities.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Wishlist", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Customer", "Customer")
                        .WithOne("Wishlist")
                        .HasForeignKey("DataAccessLayer.Entities.Wishlist", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WishlistItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Book");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocalIdentityUser", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
